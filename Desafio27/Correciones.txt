Buenas, Marco! Lo hab√≠a empezado a corregir antes de la clase y no llegue, aproveche estos ultimos minutos de pausa para terminarlo.



Productos:

Listar todos los productos ‚úÖ
Listar producto por Id ‚úÖ
Guardar producto ‚úÖ 
Actualizar producto ‚úÖ 
Eliminar producto por ID ‚úÖ
Excelente los filtros ‚úÖ Solo te doy una recomendaci√≥n, la querie para ver productos dentro de un rango de precios o stock la podes hacer mas facil, asi: {price: {$gt:pricemin, $lt: pricemax}} y me parece que quedar√≠a mejor con $gte y $lte as√≠ incluye los numero que queres filtrar inclusive




‚≠ïÔ∏è Todos estos endpoints funcionan perfecto, felicitaciones üéâ Pero est√° faltando manejar los errores en los controllers! Al no hacer esto si alguna de las funciones de los Services tira un error la petici√≥n HTTP va a quedar colgada, porque solamente estas haciendo un console.log en el catch. Siempre tenes que devolver una respuesta, aunque sea con un c√≥digo y mensaje de error




Carrito:

No me voy a poner muy exigente con esto porque quedamos en hacerlo diferente a lo que dice la consigna porque pensando a futuro esta no ten√≠a mucho sentido. Los endpoints que para mi deberian existir son:

Crear carrito
Obtener carrito por ID
Guardar producto por ID de producto en un carrito (si el producto ya existe solamente se deber√≠a actualizar un contador o algo asi)
Borrar producto por ID de producto y ID de carrito
Borrar carrito por ID


Los que hiciste en principio est√°n bien,anda pensando en esto para la pr√≥xima. Tambi√©n falto el manejo de errores igual, no cuelgues con eso.



En t√©rminos generales la estructura es muy clara, mejoraste mucho en este aspecto. Solo vi que quedo un archivo de Knex y algunos cosas desctualizadas en el package.json como los scripts para arrancar el proyecto o dependencias que no se usan. Las funcionalidades tambien est√°n bien implementadas. Para esta observaci√≥n s√≥lo eval√∫e lo de la consigna, los extra los observare en breve. Va un puntaje de Optimo +5 puntos para el Top10





15/09 22:39